import { ComputedRef, Ref } from 'vue-demi';
import firebase from 'firebase/app';
import firebase$1 from 'firebase';

interface FirebaseAuthOptions {
    isAuthenticated: ComputedRef<boolean>;
    user: Ref<firebase.User | null>;
}
declare function useAuth(authInstance: typeof firebase.auth | firebase.auth.Auth): {
    isAuthenticated: ComputedRef<boolean>;
    user: Ref<{
        delete: () => Promise<void>;
        emailVerified: boolean;
        getIdTokenResult: (forceRefresh?: boolean | undefined) => Promise<firebase.auth.IdTokenResult>;
        getIdToken: (forceRefresh?: boolean | undefined) => Promise<string>;
        isAnonymous: boolean;
        linkAndRetrieveDataWithCredential: (credential: firebase.auth.AuthCredential) => Promise<firebase.auth.UserCredential>;
        linkWithCredential: (credential: firebase.auth.AuthCredential) => Promise<firebase.auth.UserCredential>;
        linkWithPhoneNumber: (phoneNumber: string, applicationVerifier: firebase.auth.ApplicationVerifier) => Promise<firebase.auth.ConfirmationResult>;
        linkWithPopup: (provider: firebase.auth.AuthProvider) => Promise<firebase.auth.UserCredential>;
        linkWithRedirect: (provider: firebase.auth.AuthProvider) => Promise<void>;
        metadata: {
            creationTime?: string | undefined;
            lastSignInTime?: string | undefined;
        };
        multiFactor: {
            enrolledFactors: {
                uid: string;
                displayName?: string | null | undefined;
                enrollmentTime: string;
                factorId: string;
            }[];
            enroll: (assertion: firebase.auth.MultiFactorAssertion, displayName?: string | null | undefined) => Promise<void>;
            getSession: () => Promise<firebase.auth.MultiFactorSession>;
            unenroll: (option: string | firebase.auth.MultiFactorInfo) => Promise<void>;
        };
        phoneNumber: string | null;
        providerData: ({
            displayName: string | null;
            email: string | null;
            phoneNumber: string | null;
            photoURL: string | null;
            providerId: string;
            uid: string;
        } | null)[];
        reauthenticateAndRetrieveDataWithCredential: (credential: firebase.auth.AuthCredential) => Promise<firebase.auth.UserCredential>;
        reauthenticateWithCredential: (credential: firebase.auth.AuthCredential) => Promise<firebase.auth.UserCredential>;
        reauthenticateWithPhoneNumber: (phoneNumber: string, applicationVerifier: firebase.auth.ApplicationVerifier) => Promise<firebase.auth.ConfirmationResult>;
        reauthenticateWithPopup: (provider: firebase.auth.AuthProvider) => Promise<firebase.auth.UserCredential>;
        reauthenticateWithRedirect: (provider: firebase.auth.AuthProvider) => Promise<void>;
        refreshToken: string;
        reload: () => Promise<void>;
        sendEmailVerification: (actionCodeSettings?: firebase.auth.ActionCodeSettings | null | undefined) => Promise<void>;
        tenantId: string | null;
        toJSON: () => Object;
        unlink: (providerId: string) => Promise<firebase.User>;
        updateEmail: (newEmail: string) => Promise<void>;
        updatePassword: (newPassword: string) => Promise<void>;
        updatePhoneNumber: (phoneCredential: firebase.auth.AuthCredential) => Promise<void>;
        updateProfile: (profile: {
            displayName?: string | null | undefined;
            photoURL?: string | null | undefined;
        }) => Promise<void>;
        verifyBeforeUpdateEmail: (newEmail: string, actionCodeSettings?: firebase.auth.ActionCodeSettings | null | undefined) => Promise<void>;
        displayName: string | null;
        email: string | null;
        photoURL: string | null;
        providerId: string;
        uid: string;
    } | null>;
};

interface FirestoreOptions {
    errorHandler?: (err: Error) => void;
    autoDispose?: boolean;
}
declare type FirebaseDocRef<T> = firebase$1.firestore.Query<T> | firebase$1.firestore.DocumentReference<T>;
declare function useFirestore<T extends firebase$1.firestore.DocumentData>(docRef: firebase$1.firestore.DocumentReference<T>, initialValue: T, options?: FirestoreOptions): Ref<T | null>;
declare function useFirestore<T extends firebase$1.firestore.DocumentData>(docRef: firebase$1.firestore.Query<T>, initialValue: T[], options?: FirestoreOptions): Ref<T[]>;
declare function useFirestore<T extends firebase$1.firestore.DocumentData>(docRef: firebase$1.firestore.DocumentReference<T>, initialValue?: T | undefined, options?: FirestoreOptions): Ref<T | undefined | null>;
declare function useFirestore<T extends firebase$1.firestore.DocumentData>(docRef: firebase$1.firestore.Query<T>, initialValue?: T[], options?: FirestoreOptions): Ref<T[] | undefined>;

interface RTDBOptions {
    autoDispose?: boolean;
}
/**
 * Reactive Firebase Realtime Database binding.
 *
 * @param docRef
 * @param options
 */
declare function useRTDB<T = any>(docRef: firebase$1.database.Reference, options?: RTDBOptions): Ref<T | undefined>;

export { FirebaseAuthOptions, FirebaseDocRef, FirestoreOptions, RTDBOptions, useAuth, useFirestore, useRTDB };
