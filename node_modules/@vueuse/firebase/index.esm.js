import { ref, computed } from 'vue-demi';
import { tryOnUnmounted, isDef } from '@vueuse/shared';

function useAuth(authInstance) {
    let auth;
    if (authInstance instanceof Function)
        auth = authInstance();
    else
        auth = authInstance;
    const user = ref(auth.currentUser);
    const isAuthenticated = computed(() => !!user.value);
    auth.onIdTokenChanged(authUser => user.value = authUser);
    return {
        isAuthenticated,
        user,
    };
}

function getData(docRef) {
    const data = docRef.data();
    if (data) {
        Object.defineProperty(data, 'id', {
            value: docRef.id.toString(),
            writable: false,
        });
    }
    return data;
}
function isDocumentReference(docRef) {
    var _a;
    return (((_a = docRef.path) === null || _a === void 0 ? void 0 : _a.match(/\//g)) || []).length % 2 !== 0;
}
/**
 * Reactive Firestore binding. Making it straightforward to always keep your
 * local data in sync with remotes databases.
 *
 * @see https://vueuse.org/useFirestore
 * @param docRef
 * @param initialValue
 * @param options
 */
function useFirestore(docRef, initialValue = undefined, options = {}) {
    const { 
    // eslint-disable-next-line no-console
    errorHandler = (err) => console.error(err), autoDispose = true, } = options;
    if (isDocumentReference(docRef)) {
        const data = ref(initialValue);
        const close = docRef.onSnapshot((snapshot) => {
            data.value = getData(snapshot) || null;
        }, errorHandler);
        tryOnUnmounted(() => {
            close();
        });
        return data;
    }
    else {
        const data = ref(initialValue);
        const close = docRef.onSnapshot((snapshot) => {
            data.value = snapshot.docs.map(getData).filter(isDef);
        }, errorHandler);
        if (autoDispose) {
            tryOnUnmounted(() => {
                close();
            });
        }
        return data;
    }
}

/**
 * Reactive Firebase Realtime Database binding.
 *
 * @param docRef
 * @param options
 */
function useRTDB(docRef, options = {}) {
    const { autoDispose = true, } = options;
    const data = ref(undefined);
    function update(snapshot) {
        data.value = snapshot.val();
    }
    docRef.on('value', update);
    if (autoDispose) {
        tryOnUnmounted(() => {
            docRef.off('value', update);
        });
    }
    return data;
}

export { useAuth, useFirestore, useRTDB };
